# -*- python -*-
# ex: set syntax=python:

#  Copyright (c) 2016-2021, Arm Limited, All Rights Reserved
#  SPDX-License-Identifier: Apache-2.0
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  This file is part of Mbed TLS (https://www.trustedfirmware.org/projects/mbed-tls/)

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
slaves = [ "win-slave" ]
full_test_slaves = [ "debian-wheezy-i386", "debian-wheezy-amd64" ]
#linux_slaves = [ "debian-wheezy-i386", "debian-wheezy-amd64", "raspberrypi" ]
linux_slaves = [ "debian-wheezy-i386", "debian-wheezy-amd64" ]
bsd_slaves = [ "freebsd-9-i386" ]

slaves += linux_slaves
slaves += bsd_slaves

c['slaves'] = []
for slave_name in slaves:
    c['slaves'].append(BuildSlave(slave_name, "itsmine", max_builds=1, keepalive_interval=30)),

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. 

branches = [ "development", "master", "mbedtls-1.3", "mbedtls-2.1" ]
repourl = 'git@github.com:ARMmbed/mbedtls-restricted'

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(
    GitPoller(
        repourl=repourl,
        branches=True,
        pollinterval=120,
        workdir='/tmp/workdir_poller'
    )
)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.changes import filter
from buildbot.schedulers.forcesched import *

builder_names = {}
for branch in branches + ['any']:
    builder_names[branch] = []
    builder_names[branch].append(branch + " - polarssl_win32 (mingw_make)")
    builder_names[branch].append(branch + " - polarssl_win32 (msvc12_32_make)")
    builder_names[branch].append(branch + " - polarssl_win32 (msvc12_64_make)")
    for name in linux_slaves:
        builder_names[branch].append( branch + " - " + name + " (std make)")
        builder_names[branch].append( branch + " - " + name + " (cmake)")
    for name in bsd_slaves:
        builder_names[branch].append( branch + " - " + name + " (gmake)")
        builder_names[branch].append( branch + " - " + name + " (cmake)")

    for name in full_test_slaves:
        builder_names[branch].append( branch + " - " + name + " (asan)")
        builder_names[branch].append( branch + " - " + name + " (configs)")
        builder_names[branch].append( branch + " - " + name + " (cmake full)")
        builder_names[branch].append( branch + " - " + name + " (clang)")

c['schedulers'] = []

# Trigger standard set on all branches
def any_branch_not_defined_fn(branch):
    return branch not in branches

c['schedulers'].append(AnyBranchScheduler(
                       name="all (any branch)",
                       change_filter=filter.ChangeFilter(branch_fn = any_branch_not_defined_fn),
                       treeStableTimer = 60,
                       builderNames=builder_names['any']))

for branch_name in branches:
    c['schedulers'].append(SingleBranchScheduler(
                            name="all (" + branch_name +")",
                            change_filter=filter.ChangeFilter(branch = branch_name),
                            treeStableTimer = 300,
                            builderNames=builder_names[branch_name]))

    c['schedulers'].append(ForceScheduler(
                            name="force (" + branch_name +")",
             # will generate a combo box
             branch=FixedParameter(name="branch", default=branch_name),
             builderNames=builder_names[branch_name],

             # will generate a text input
             reason=StringParameter(name="reason",label="reason:<br>",
                                    required=True, size=80),

             # will generate nothing in the form, but revision, repository,
             # and project are needed by buildbot scheduling system so we
             # need to pass a value ("")
             revision=FixedParameter(name="revision", default=""),
             repository=FixedParameter(name="repository", default=""),
             project=FixedParameter(name="repository", default=""),

             # in case you dont require authentication this will display
             # input for user to type his name
             username=UserNameParameter(label="your name:<br>", size=80),
             ))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps import shell
from buildbot.steps.shell import ShellCommand

factories = {}

for branch_name in branches + ['any']:
    factories[branch_name] = {}

    nix_make = BuildFactory()
    nix_make.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    nix_make.addStep(shell.Compile(name="clean", command=["make", "clean"]))
    nix_make.addStep(shell.Compile(name="make", command=["make"]))
    nix_make.addStep(shell.Test(name="check", command=["make", "check"]))
    nix_make.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    factories[branch_name]['nix_make'] = nix_make
    
    bsd_gmake = BuildFactory()
    bsd_gmake.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    bsd_gmake.addStep(shell.Compile(name="clean", command=["gmake", "clean"]))
    bsd_gmake.addStep(shell.Compile(name="make", command=["gmake"]))
    bsd_gmake.addStep(shell.Test(name="check", command=["gmake", "check"]))
    bsd_gmake.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    factories[branch_name]['bsd_gmake'] = bsd_gmake
    
    nix_cmake = BuildFactory()
    nix_cmake.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    nix_cmake.addStep(shell.Compile(name="config", command=["cmake", "-D", "CMAKE_BUILD_TYPE:String=Check", "."]))
    nix_cmake.addStep(shell.Compile(name="clean", command=["make", "clean"]))
    nix_cmake.addStep(shell.Compile(name="make", command=["make"]))
    nix_cmake.addStep(shell.Test(name="check", command=["make", "test"]))
    nix_cmake.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    factories[branch_name]['nix_cmake'] = nix_cmake
    
    bsd_cmake = BuildFactory()
    bsd_cmake.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    bsd_cmake.addStep(shell.Compile(name="config", command=["cmake", "-D", "CMAKE_BUILD_TYPE:String=Check", "."], env={'CC': '/usr/local/bin/gcc48'}))
    bsd_cmake.addStep(shell.Compile(name="clean", command=["make", "clean"]))
    bsd_cmake.addStep(shell.Compile(name="make", command=["make"]))
    bsd_cmake.addStep(shell.Test(name="check", command=["make", "test"]))
    bsd_cmake.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    factories[branch_name]['bsd_cmake'] = bsd_cmake
    
    nix_cmake_full = BuildFactory()
    nix_cmake_full.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    nix_cmake_full.addStep(shell.Compile(name="config", command=["cmake", "-D", "CMAKE_BUILD_TYPE:String=Check", "."]))
    nix_cmake_full.addStep(shell.Compile(name="clean", command=["make", "clean"]))
    nix_cmake_full.addStep(shell.Compile(name="make", command=["make"]))
    nix_cmake_full.addStep(shell.Test(name="memcheck", command=["make", "memcheck"]))
    nix_cmake_full.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    nix_cmake_full.addStep(shell.Test(name="compat.sh", command=["./compat.sh"], workdir="build/tests"))
    #, env={'GNUTLS_CLI': 'gnutls-cli', 'GNUTLS_SERV': 'gnutls-serv'}))
    nix_cmake_full.addStep(shell.Test(name="ssl-opt.sh", command=["./ssl-opt.sh", "--memcheck"], workdir="build/tests"))
    factories[branch_name]['nix_cmake_full'] = nix_cmake_full
    
    nix_cmake_asan = BuildFactory()
    nix_cmake_asan.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    nix_cmake_asan.addStep(shell.Compile(name="config", command=["cmake", "-D", "CMAKE_BUILD_TYPE:String=ASan", "."], env={'CC': '/usr/bin/clang'}))
    nix_cmake_asan.addStep(shell.Compile(name="clean", command=["make", "clean"]))
    nix_cmake_asan.addStep(shell.Compile(name="make", command=["make"]))
    nix_cmake_asan.addStep(shell.Test(name="memcheck", command=["make", "test"]))
    nix_cmake_asan.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    nix_cmake_asan.addStep(shell.Test(name="compat.sh", command=["./compat.sh"], workdir="build/tests"))
    #, env={'GNUTLS_CLI': 'gnutls-cli', 'GNUTLS_SERV': 'gnutls-serv'}))
    nix_cmake_asan.addStep(shell.Test(name="ssl-opt.sh", command=["./ssl-opt.sh"], workdir="build/tests"))
    nix_cmake_asan.addStep(shell.Test(name="test-ref-configs.pl", command=["tests/scripts/test-ref-configs.pl"]))
    factories[branch_name]['nix_cmake_asan'] = nix_cmake_asan
    
    nix_cmake_configs = BuildFactory()
    nix_cmake_configs.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    nix_cmake_configs.addStep(shell.Compile(name="config", command=["cmake", "-D", "CMAKE_BUILD_TYPE:String=Check", "."]))
    nix_cmake_configs.addStep(shell.Test(name="test-ref-configs.pl", command=["tests/scripts/test-ref-configs.pl"]))
    factories[branch_name]['nix_cmake_configs'] = nix_cmake_configs
    
    nix_cmake_clang = BuildFactory()
    nix_cmake_clang.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    nix_cmake_clang.addStep(shell.Compile(name="config", command=["cmake", "-D", "CMAKE_BUILD_TYPE:String=Check", "."], env={'CC': '/usr/bin/clang'}))
    nix_cmake_clang.addStep(shell.Compile(name="clean", command=["make", "clean"]))
    nix_cmake_clang.addStep(shell.Compile(name="make", command=["make"]))
    nix_cmake_clang.addStep(shell.Test(name="check", command=["make", "test"]))
    nix_cmake_clang.addStep(shell.Test(name="selftest", command=["./selftest"], workdir="build/programs/test"))
    factories[branch_name]['nix_cmake_clang'] = nix_cmake_clang
    
    win32_mingw = BuildFactory()
    win32_mingw.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    win32_mingw.addStep(shell.Configure(name="config", command=["cmake", ".", "-G", "MinGW Makefiles"]))
    win32_mingw.addStep(shell.Compile(name="make", command=["mingw32-make"]))
    win32_mingw.addStep(shell.Test(name="check-verbose", command=["ctest", "-VV"]))
    win32_mingw.addStep(shell.Test(name="check", command=["mingw32-make", "test"]))
    win32_mingw.addStep(shell.Test(name="selftest", command=["selftest.exe"], workdir="build/programs/test"))
    factories[branch_name]['win32_mingw'] = win32_mingw
    
    win32_msvc12_32 = BuildFactory()
    win32_msvc12_32.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    win32_msvc12_32.addStep(shell.Configure(name="config", command=["cmake", ".", "-G", "Visual Studio 12"]))
    win32_msvc12_32.addStep(shell.Compile(name="make", command=["MSBuild", "ALL_BUILD.vcxproj"]))
    factories[branch_name]['win32_msvc12_32'] = win32_msvc12_32
    
    win32_msvc12_64 = BuildFactory()
    win32_msvc12_64.addStep(Git(mode='clobber',repourl=repourl, branch=branch_name))
    win32_msvc12_64.addStep(shell.Configure(name="config", command=["cmake", ".", "-G", "Visual Studio 12 Win64"]))
    win32_msvc12_64.addStep(shell.Compile(name="make", command=["MSBuild", "ALL_BUILD.vcxproj"]))
    factories[branch_name]['win32_msvc12_64'] = win32_msvc12_64
    
from buildbot.config import BuilderConfig

c['builders'] = []
for branch in branches + ['any']:
    for slave_name in linux_slaves:
        c['builders'].append(
                BuilderConfig(name=branch + " - " + slave_name + " (std make)",
                    slavenames=[slave_name],
                    factory=factories[branch]['nix_make']))

        c['builders'].append(
                BuilderConfig(name=branch + " - " + slave_name + " (cmake)",
                    slavenames=[slave_name],
                    factory=factories[branch]['nix_cmake']))

    for slave_name in bsd_slaves:
        c['builders'].append(
                BuilderConfig(name=branch + " - " + slave_name + " (gmake)",
                    slavenames=[slave_name],
                    factory=factories[branch]['bsd_gmake']))

        c['builders'].append(
                BuilderConfig(name=branch + " - " + slave_name + " (cmake)",
                    slavenames=[slave_name],
                    factory=factories[branch]['bsd_cmake']))

    c['builders'].append(
        BuilderConfig(name=branch + " - polarssl_win32 (mingw_make)",
          slavenames=["win-slave"],
          factory=factories[branch]['win32_mingw']))

    c['builders'].append(
        BuilderConfig(name=branch + " - polarssl_win32 (msvc12_32_make)",
          slavenames=["win-slave"],
          factory=factories[branch]['win32_msvc12_32']))

    c['builders'].append(
        BuilderConfig(name=branch + " - polarssl_win32 (msvc12_64_make)",
          slavenames=["win-slave"],
          factory=factories[branch]['win32_msvc12_64']))

    for slave_name in full_test_slaves:
        c['builders'].append(
            BuilderConfig(name=branch + " - " + slave_name + " (asan)",
              slavenames=[slave_name],
              factory=factories[branch]['nix_cmake_asan']))

        c['builders'].append(
            BuilderConfig(name=branch + " - " + slave_name + " (configs)",
              slavenames=[slave_name],
              factory=factories[branch]['nix_cmake_configs']))

        c['builders'].append(
            BuilderConfig(name=branch + " - " + slave_name + " (cmake full)",
              slavenames=[slave_name],
              factory=factories[branch]['nix_cmake_full']))

        c['builders'].append(
            BuilderConfig(name=branch + " - " + slave_name + " (clang)",
              slavenames=[slave_name],
              factory=factories[branch]['nix_cmake_clang']))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port="tcp:8010:interface=127.0.0.1", authz=authz_cfg))

####### Mail Notifier

from buildbot.status.mail import MailNotifier
mn = MailNotifier(
    fromaddr="buildbot@polarssl.org",
    mode=("failing", "warnings", "exception"),
    addLogs=True,
    useTls=True, relayhost="vps2.offspark.com", smtpPort=587,
    sendToInterestedUsers=False,
    extraRecipients=['paul@polarssl.org', 'mpg@polarssl.org', 'simon.butcher@arm.com']
)
c['status'].append(mn);

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "mbed TLS"
c['titleURL'] = "https://tls.mbed.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.polarssl.org/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

